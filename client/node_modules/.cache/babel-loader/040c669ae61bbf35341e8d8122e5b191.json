{"ast":null,"code":"import { GET_ERRORS, SET_CURRENT_USER } from './types';\nimport axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode'; //Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post('/api/users/register', userData).then(function (res) {\n      return history.push('/login');\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //login - get user token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/users/login', userData).then(function (res) {\n      //Save to localStorage\n      var token = res.data.token; //Set token to local ls\n\n      localStorage.setItem('jwtToken', token); // Set token to auth header\n\n      setAuthToken(token); // decode token to get user userData\n\n      var decoded = jwt_decode(token); //set current users\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    //remove token from local localStorage\n    localStorage.removeItem('jwtToken'); //remove auth header for future requests\n\n    setAuthToken(false); //set current user to {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["/Users/ryancho/Desktop/NYU Spring 2019/DevOps/forkedGit/rally4/rally/client/src/actions/authActions.js"],"names":["GET_ERRORS","SET_CURRENT_USER","axios","setAuthToken","jwt_decode","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,gBAArB,QAA6C,SAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DN,IAAAA,KAAK,CAACO,IAAN,CAAW,qBAAX,EAAkCH,QAAlC,EACGI,IADH,CACQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KADX,EAEGC,KAFH,CAES,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEf,UADC;AAEPgB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAFZ;AAQD,GAT2B;AAAA,CAArB,C,CAWP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAb,QAAQ;AAAA,SAAI,UAAAE,QAAQ,EAAI;AAC/CN,IAAAA,KAAK,CACFO,IADH,CACQ,kBADR,EAC4BH,QAD5B,EAEGI,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACX;AADW,UAEHS,KAFG,GAEOT,GAAG,CAACO,IAFX,CAEHE,KAFG,EAGX;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJW,CAKX;;AACAjB,MAAAA,YAAY,CAACiB,KAAD,CAAZ,CANW,CAOX;;AACA,UAAMG,OAAO,GAAGnB,UAAU,CAACgB,KAAD,CAA1B,CARW,CASX;;AACAZ,MAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AAED,KAdH,EAeGV,KAfH,CAeS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEf,UADC;AAEPgB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAfZ;AAqBD,GAtBgC;AAAA,CAA1B,C,CAwBP;;AACA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACD,OAAD,EAAa;AACzC,SAAO;AACLR,IAAAA,IAAI,EAAEd,gBADD;AAELe,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAjB,QAAQ,EAAI;AAC1C;AACAa,IAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAvB,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAK,IAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GAPyB;AAAA,CAAnB","sourcesContent":["import { GET_ERRORS, SET_CURRENT_USER } from './types';\nimport axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\n//Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post('/api/users/register', userData)\n    .then(res => history.push('/login'))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n//login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post('/api/users/login', userData)\n    .then(res => {\n      //Save to localStorage\n      const { token } = res.data;\n      //Set token to local ls\n      localStorage.setItem('jwtToken', token);\n      // Set token to auth header\n      setAuthToken(token);\n      // decode token to get user userData\n      const decoded = jwt_decode(token);\n      //set current users\n      dispatch(setCurrentUser(decoded));\n\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// set logged in user\nexport const setCurrentUser = (decoded) => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// log user out\nexport const logoutUser = () => dispatch => {\n  //remove token from local localStorage\n  localStorage.removeItem('jwtToken');\n  //remove auth header for future requests\n  setAuthToken(false);\n  //set current user to {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n}\n"]},"metadata":{},"sourceType":"module"}